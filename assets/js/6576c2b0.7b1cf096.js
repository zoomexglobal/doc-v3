"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4926],{5680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>c});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),p=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,c=m["".concat(o,".").concat(d)]||m[d]||y[d]||s;return r?n.createElement(c,i(i({ref:t},u),{},{components:r})):n.createElement(c,i({ref:t},u))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<s;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4981:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=r(8168),a=(r(6540),r(5680));const s={title:"Get Sub UID",sidebar_label:"Get Sub UID",sidebar_position:4},i=void 0,l={unversionedId:"v3/asset/sub-uid-list",id:"v3/asset/sub-uid-list",title:"Get Sub UID",description:"Query the sub UIDs under a main UID",source:"@site/docs/v3/asset/sub-uid-list.mdx",sourceDirName:"v3/asset",slug:"/v3/asset/sub-uid-list",permalink:"/docs/v3/asset/sub-uid-list",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Get Sub UID",sidebar_label:"Get Sub UID",sidebar_position:4},sidebar:"v3SideBar",previous:{title:"Get Internal Transfer Records",permalink:"/docs/v3/asset/transfer-list"},next:{title:"Enums Definitions",permalink:"/docs/v3/asset/enum"}},o={},p=[{value:"HTTP Request",id:"http-request",level:3},{value:"Request Parameters",id:"request-parameters",level:3},{value:"Response Parameters",id:"response-parameters",level:3},{value:"Request Example",id:"request-example",level:3},{value:"Response Example",id:"response-example",level:3}],u={toc:p},m="wrapper";function y(e){let{components:t,...r}=e;return(0,a.yg)(m,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Query the sub UIDs under a main UID"),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Can query by the master UID's api key ",(0,a.yg)("strong",{parentName:"p"},"only"))),(0,a.yg)("h3",{id:"http-request"},"HTTP Request"),(0,a.yg)("p",null,"GET ",(0,a.yg)("inlineCode",{parentName:"p"},"/private/v1/asset/sub-member/member-ids")),(0,a.yg)("h3",{id:"request-parameters"},"Request Parameters"),(0,a.yg)("p",null,"None"),(0,a.yg)("h3",{id:"response-parameters"},"Response Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Parameter"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Comments"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"sub_user_id"),(0,a.yg)("td",{parentName:"tr",align:"left"},"array","<","string",">"),(0,a.yg)("td",{parentName:"tr",align:null},"All sub UIDs under the main UID")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"transferable_sub_ids"),(0,a.yg)("td",{parentName:"tr",align:"left"},"array","<","string",">"),(0,a.yg)("td",{parentName:"tr",align:null},"All sub UIDs that have universal transfer enabled")))),(0,a.yg)("hr",null),(0,a.yg)("h3",{id:"request-example"},"Request Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'        def your_method(apiKey, secretKey):\n            timestamp = int(time.time() * 10 ** 3)\n            url = \'https://openapi-testnet.zoomex.com/private/v1/asset/sub-member/member-ids\'\n            method = "GET"\n            params = {\n                "api_key": apiKey,\n                "timestamp": str(timestamp),\n                "recv_window": "5000",\n            }\n            param_str = \'\'\n            for key in sorted(params.keys()):\n                v = params[key]\n                if isinstance(params[key], bool):\n                    if params[key]:\n                        v = \'true\'\n                    else:\n                        v = \'false\'\n                param_str += key + \'=\' + v + \'&\'\n            param_str = param_str[:-1]\n            hash = hmac.new(secretKey, param_str.encode("utf-8"), hashlib.sha256)\n            signature = hash.hexdigest()\n            sign_real = {\n                "sign": signature\n            }\n            param_str = quote_plus(param_str, safe="=&")\n            full_param_str = f"{param_str}&sign={sign_real[\'sign\']}"\n            urllib3.disable_warnings()\n            s = requests.session()\n            s.keep_alive = False\n            response = requests.request(method, f"{url}?{full_param_str}", verify=False)\n\n        def main():\n            apiKey = "Your key"\n            secret = b"Your secret"\n            your_method(apiKey, secret)\n\n')),(0,a.yg)("h3",{id:"response-example"},"Response Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "result": {\n    "sub_user_id": [\n      1524601,\n      1524613\n    ],\n    "transferable_sub_ids": []\n  },\n  "rate_limit": 1,\n  "rate_limit_status": 59,\n  "ext_code": "",\n  "time_now": 1690947047366,\n  "rate_limit_reset_ms": 1690947047366,\n  "ret_msg": "OK",\n  "ext_info": null,\n  "ret_code": 0\n}\n')))}y.isMDXComponent=!0}}]);